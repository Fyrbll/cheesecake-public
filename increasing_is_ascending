(define-fun-rec is-Ascending ((v Value)) Bool
  (or (is-nil v)
      (and (is-cons v)
           (is-int (car v))
           (is-nil (cdr v)))
      (and (is-cons v)
           (is-int (car v))
           (is-cons (cdr v))
           (is-Ascending (cdr (cdr v)))
           (< (unint (car v)) (unint (car (cdr v))))
           (is-Ascending (cdr v))))
  (:measure (size v))
  (:relation (nat< x y)))

(prove (forall ((v Value))
  (=> (and (is-cons v)
           (is-int (car v))
           (is-cons (cdr v))
           (is-int (car (cdr v)))
           (is-cons (cdr (cdr v)))
           (is-int (car (cdr (cdr v))))
           (is-Ascending (cdr (cdr (cdr v))))
           (= (unint (car (cdr v))) (+ (unint (car v)) 1))
           (= (unint (car (cdr (cdr v)))) (+ (unint (car v)) 2))
           (is-Ascending (cdr (cdr v))))
      (is-Ascending v))))