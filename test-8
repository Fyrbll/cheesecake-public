(define-fun-rec is-ord-list ((v Value)) Bool
  (or (is-nil v)
      (and (is-cons v)
           (is-int (car v))
           (is-nil (cdr v)))
      (and (is-cons v)
           (is-int (car v))
           (is-cons (cdr v))
           (is-int (car (cdr v)))
           (is-ord-list (cdr (cdr v)))
           (<= (unint (car v))
               (unint (car (cdr v))))
           (is-ord-list (cdr v))))
  (:measure (size v))
  (:relation (nat< x y)))

(define-fun-rec is-list ((v Value)) Bool
  (or (is-nil v)
      (and (is-cons v)
           (is-int (car v))
           (is-nil (cdr v)))
      (and (is-cons v)
           (is-int (car v))
           (is-cons (cdr v))
           (is-int (car (cdr v)))
           (is-nil (cdr (cdr v))))
      (and (is-cons v)
           (is-int (car v))
           (is-cons (cdr v))
           (is-int (car (cdr v)))
           (is-cons (cdr (cdr v)))
           (is-int (car (cdr (cdr v))))
           (is-list (cdr (cdr (cdr v))))))
  (:measure (size v))
  (:relation (nat< x y)))

(prove (forall ((v Value))
  (=> (is-ord-list v) (is-list v))))